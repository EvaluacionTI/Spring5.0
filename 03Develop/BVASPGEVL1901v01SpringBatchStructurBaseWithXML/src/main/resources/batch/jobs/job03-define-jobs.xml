<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:batch="http://www.springframework.org/schema/batch"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/batch http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

	<!-- A. Referencia al contexto -->
	<import resource="../config/job02-batch-context.xml" />

	<!-- B. Definir los atributos o columnas del archivo que se va leer, así 
		mismo el delimitador entre campos -->
	<bean id="idCompraToken"
		class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
		<property name="delimiter" value=","></property>
		<property name="names" value="ID, PRECIO, CANTIDAD, NOMBRE, FECHA"></property>
	</bean>

	<bean id="idCompraLineMapper"
		class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
		<property name="lineTokenizer" ref="idCompraToken" />
		<property name="fieldSetMapper">
			<bean class="pe.bbva.spring.batch.mapper.CLCompraMapper"></bean>
		</property>
	</bean>

	<!-- C. Definir el archivo de entrada y su ruta -->
	<bean id="idCompraReader" class="org.springframework.batch.item.file.FlatFileItemReader">
		<description>Se define la fuenta de entrada u origen de datos
		</description>
		<property name="resource" value="classpath:/fuente/input/compras.csv"></property>
		<property name="lineMapper" ref="idCompraLineMapper" />
	</bean>


	<!-- D. Establecer el Jobs El gestor de transacciones que se usará durante 
		el procesamiento batch. En este caso, usamos una implementación "dummy" provista 
		por Spring Batch, ya que no usaremos ningun recurso transaccional. -->
	<!-- Un trabajo de Spring Batch. Este es el bean principal de Spring Batch, 
		que declara el trabajo batch que se va a ejecutar. El trabajo está compuesto 
		de varios "pasos" (step). Los pasos se ejecutan en forma secuencial. En este 
		ejemplo, el trabajo consiste en ejecutar tres pasos. Cada paso invoca a CEImprimirTasklet, 
		el cual imprime por consola un mensaje. El resultado por consola es el mensaje 
		"Banco Continental Arquitectura Apx....!!!". -->
	<!-- Se define los pasos del Job -->

	<batch:job id="idFirstJobBatch">
		<batch:step id="idFirstStep">
			<batch:tasklet>
				<batch:chunk reader="idCompraReader" processor="idCompraProcesor"
					writer="idCompraWriter" commit-interval="6" />
			</batch:tasklet>
		</batch:step>
	</batch:job>

	<bean id="idCompraProcesor" class="pe.bbva.spring.batch.processor.CLCompraProcessor"></bean>

	<bean id="idCompraWriter" class="pe.bbva.spring.batch.writer.CDCompraWriter"></bean>

</beans>
