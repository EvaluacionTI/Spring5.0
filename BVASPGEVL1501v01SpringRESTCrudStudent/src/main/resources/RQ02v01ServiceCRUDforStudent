# Spring Rest

## I. Objetivo 

	Mantenimiento CRUD para un Servicios Rest de la Entidad Estudiante

## II. Requerimiento

	1. Desarrollar una API REST con Spring Boot para efectuar un CRUD para la entidad estudiantes que les permita 
	   leer, agregar, actualizar y eliminar estudiantes.
	2. Identifica los recursos para exponer en la API.	
	3. Defina los URI para esos recursos.
	4. Asignar métodos HTTP a las operaciones CRUD.
	5. Elija el tipo o tipos de medios para intercambiar datos.
	6. Utilizaremos los métodos HTTP GET, POST, PUT y DELETE para nuestras operaciones CRUD.
	7. Nuestra API REST usará JSON como el tipo de medio para intercambiar datos.
	
## III. Analisis

	1. Datos del Proyecto
	
		BVASPGEVLNNvXX<Nombre de Proyecto>
		
		NN : Número de Proyecto
		SS : Secuencia por proyecto
		XX : Versión del proyecto
		15 Spring Rest
		16 Spring Test
		17 Spring Mongo
		18 Spring Oracle
		19 Spring Batch

	2. Versión de Spring
		Utilizar la versión 2.0.4.RELEASE de sprint boot
		Versión de Spring 5.0.8
		Utilizar la URL: http://localhost/8020

	3. URL de ejemplo
	   
	   https://examples.javacodegeeks.com/enterprise-java/spring/boot/spring-boot-rest-api-tutorial/

	4. Las tareas efectuadas son:
	
	|---------------------------|------------------|----------|
	|          Acción           |       URI	       | Método   |
	|---------------------------|------------------|----------|
	|Leer todos los estudiantes | /students        |  GET     |
	|Lee un solo estudiante     | /students/ {id}  |  GET     |
	|Agrega un estudiante       | /students        |  POST    |
	|Actualizar un estudiante   | /students        |  PUT     |
	|Eliminar un estudiante     | /students/{id}   |  DELETE  |
	|---------------------------|------------------|----------|

### III. Solution

	1. Proyecto
	
	|--------------------------------------------------------------|
	| N° |     Nombre     | Carpeta                                |
	|--------------------------------------------------------------|
	|  1 | Proyecto       | BVASPGEVL1501v01SpringRESTCrudStudent  |
    |--------------------------------------------------------------|
	
	2. Java
	
	Se está utilizando java.util.Optional como un contenedor para nuestro objeto de Estudiante ya que nos ayudará a manejar 
	casos donde el Estudiante es nulo. 
	Esto es puramente una decisión de implementación y no tiene nada que ver con los conceptos o restricciones REST
	
	|-----------------------------------------------------------------------------------------------------------|
	| N° |     Paquete                   | Componente                    |  Descripción                         |
	|--------------------------------------------------------------------|--------------------------------------|
	|  1 | pe.etg.bbva.spring.entity     | CEStudent                     | Clase estudiante                     |
	|  2 | pe.etg.bbva.spring.model      | CMStudentRepository           | Clase Repository de acceso a datos   |
	|  3 | pe.etg.bbva.spring.controller | CCStudentController           | Clase para mapear el front           |
	|  4 | pe.etg.bbva.spring.view       | CV1302v01SpringRestCRUDStudent| Clase main uso de CommandLineRunner  |  
	|-----------------------------------------------------------------------------------------------------------|

	2. Test

	|-----------------------------------------------------------------------------------------------------------------|
	| N° |     Paquete               | Componente                         |  Descripción                              |
	|-----------------------------------------------------------------------------------------------------------------|
	|  1 | pe.etg.bbva.spring.entity | CEStudentTest                      | Utilizando @RunWith(Parameterized.class)  |
	|  2 | pe.etg.bbva.spring.modelo | CMStudentRepositoryTest            | Utilizando java.util.Optional             |
	|  3 | pe.etg.bbva.spring.view   | CV1302v01SpringRestCRUDStudentTest |                                           |
	|-----------------------------------------------------------------------------------------------------------------|

### IV. Pruebas

	1. Postman
	
	|-----------------------------------|--------|------------------------------------------|
    |          Acción                   | Método | Resultado                                |
    |-----------------------------------|--------|------------------------------------------|
    |http://localhost:8020/students     | GET    | Un JSON de los estudiante                |
    |http://localhost:8020/students/104 | GET    | Lista un estudiante en JSON              |
    |http://localhost:8020/students     | POST   | Inyecta un JSON de un estudiante         |
    |http://localhost:8020/students     | PUT    | Actualiza desde un JSON de un estudiante |
    |http://localhost:8020/students/103 | DELETE | Eliminar un id                           |
    |---------------------------------------------------------------------------------------|
	
	2. Browse
	
	|-----------------------------------|--------|------------------------------------------|
    |          Acción                   | Método | Resultado                                |
    |-----------------------------------|--------|------------------------------------------|
    |http://localhost:8020/students     | GET    | Un JSON de los estudiante                |
    |http://localhost:8020/students/104 | GET    | Lista un estudiante en JSON              |